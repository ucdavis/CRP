@model CRP.Controllers.ViewModels.ItemViewModel
@using CRP.Core.Resources
@using CRP.Controllers
@using Microsoft.Web.Mvc
@using MvcContrib.FluentHtml


@{
    ViewBag.Title = "Edit Item";
}

@section NavButtons
{
    <div class="pull-right" style="margin-left: 10px;">
        <div class="dropdown">

            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Item Actions <span class="caret"></span></button>
            <ul class="dropdown-menu">
                <li>@Html.ActionLink("Details", "Details", "ItemManagement", new { id = Model.Item.Id }, null)</li>
                <li>@Html.ActionLink("Map", "Map", "ItemManagement", new { id = Model.Item.Id }, null)</li>
                <li class="divider"></li>
                <li>@Html.ActionLink("Back to List", "List", "ItemManagement")</li>
            </ul>
        </div>
    </div>
    <div class="pull-right">
        @Html.Partial("_LogonPartial")
    </div>

}


<div class="boundary">
    <h2>@ViewBag.Title</h2>

    @Html.ValidationSummary("Create was unsuccessful. Please correct the errors and try again.")

    <div id="tabs">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active"><a id="Tab-@StaticValues.Tab_Details" href="#@StaticValues.Tab_Details" data-toggle="tab">Item Details</a></li>
            <li role="presentation"><a id="Tab-@StaticValues.Tab_Editors" href="#@StaticValues.Tab_Editors" data-toggle="tab">Editors</a></li>
            <li role="presentation"><a id="Tab-@StaticValues.Tab_Questions" href="#@StaticValues.Tab_Questions" data-toggle="tab">Questions</a></li>
            <li role="presentation"><a id="Tab-@StaticValues.Tab_Templates" href="#@StaticValues.Tab_Templates" data-toggle="tab">Confirmation Template</a></li>
            <li role="presentation"><a id="Tab-@StaticValues.Tab_Coupons" href="#@StaticValues.Tab_Coupons" data-toggle="tab">Coupons</a></li>
        </ul>
        <div class="tab-content">
            <div id="@StaticValues.Tab_Details" class="tab-pane active">

                @using (Html.BeginForm("Edit", "ItemManagement", FormMethod.Post, new { @enctype = "multipart/form-data" }))
                {
                    @Html.Partial("ItemForm")
                }

            </div>
            <div id="@StaticValues.Tab_Editors" class="tab-pane">

                @using (Html.BeginForm("AddEditor", "ItemManagement", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("id")
                    <div class="form-group">
                        Add User: @this.Select("userId").Options(Model.Users.OrderBy(a => a.LastName), x => x.Id, x => x.SortableName).FirstOption("--Select a User--")
                        <input type="submit" value="Add User" class="btn btn-primary" />
                    </div>
                }

                <table id="table-editors" class="table table-bordered">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Full Name</th>
                            <th>Owner</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var editor in Model.Item.Editors)
                        {
                            <tr>
                                <td>
                                    @using (Html.BeginForm("RemoveEditor", "ItemManagement", FormMethod.Post, new { id = "RemoveForm" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("id")
                                        @Html.Hidden("editorId", editor.Id)
                                        <a href="javascript:;" class="FormSubmit">Delete</a>
                                    }
                                </td>
                                <td>@editor.User.FullName</td>
                                <td>@editor.Owner</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div id="@StaticValues.Tab_Questions" class="tab-pane">
                <fieldset>
                    <legend>Transaction</legend>

                    <p>
                        @Html.ActionLink("Add Question Set", "LinkToItem", "QuestionSet", new { itemId = Model.Item.Id, transaction = true, quantity = false }, null)
                    </p>

                    @{
                        var transactionQuestionSets = Model.Item.QuestionSets.Where(a => a.TransactionLevel).OrderBy(a => a.Order);
                    }
                    <table id="table-questions-transactions" class="table table-bordered">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Name</th>
                                <th># of Questions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var question in transactionQuestionSets)
                            {
                                <tr>
                                    <td nowrap>
                                        @using (Html.BeginForm("UnlinkFromItem", "QuestionSet", new { id = question.Id }, FormMethod.Post, new { style = "display:inline-block" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <a href="javascript:;" class="FormSubmit">Delete</a>
                                        }

                                        @if (!question.QuestionSet.SystemReusable || !question.QuestionSet.CollegeReusable || !question.QuestionSet.UserReusable)
                                        {
                                            <text>|</text>
                                            @Html.ActionLink("Edit", "Edit", "QuestionSet", new { id = question.QuestionSet.Id }, null)
                                        }
                                    </td>
                                    <td>@question.QuestionSet.Name</td>
                                    <td>@question.QuestionSet.Questions.Count</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </fieldset>

                <fieldset>
                    <legend>Quantity</legend>

                    <p>
                        @Html.ActionLink("Add Question Set", "LinkToItem", "QuestionSet", new { itemId = Model.Item.Id, transaction = false, quantity = true }, null)
                    </p>

                    @{
                        var transactionQuantitySets = Model.Item.QuestionSets.Where(a => a.QuantityLevel).OrderBy(a => a.Order);
                    }
                    <table id="table-questions-quantity" class="table table-bordered">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Name</th>
                                <th># of Questions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var question in transactionQuantitySets)
                            {
                                <tr>
                                    <td nowrap>
                                        @using (Html.BeginForm("UnlinkFromItem", "QuestionSet", new { id = question.Id }, FormMethod.Post, new { style = "display:inline-block" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <a href="javascript:;" class="FormSubmit">Delete</a>
                                        }

                                        @if (!question.QuestionSet.SystemReusable || !question.QuestionSet.CollegeReusable || !question.QuestionSet.UserReusable)
                                        {
                                            <text>|</text>
                                            @Html.ActionLink("Edit", "Edit", "QuestionSet", new { id = question.QuestionSet.Id }, null)
                                        }
                                    </td>
                                    <td>@question.QuestionSet.Name</td>
                                    <td>@question.QuestionSet.Questions.Count</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </fieldset>
            </div>
            <div id="@StaticValues.Tab_Templates" class="tab-pane">

                @Html.Partial("TemplateInstructions")
                <h3>Paid Template</h3>
                @Html.TextAreaFor(x => x.PaidText)

                <h3>Unpaid Template</h3>
                @Html.TextAreaFor(x => x.UnpaidText)

                <input style="margin-top: 15px; margin-bottom: 15px;" type="button" value="Save" class="btn btn-primary" onclick="SaveTemplateText()" />

                <text class="help-block">
                    The Unpaid Template should be used if your event is free or if you allow a coupon that can reduce the price to zero.<br />
                    As the language would most likely be different between these two, they need to be different.<br />
                    If your event will always charge something, you can leave this blank.<br />
                    If you click on the "Template Fields" to the right, the replaceable text will be inserted where your cursor is in the text editor.
                </text>

            </div>
            <div id="@StaticValues.Tab_Coupons" class="tab-pane">
                <fieldset>
                    <p>
                        @Html.ActionLink("Generate Coupon", "Create", "Coupon", new { itemId = Model.Item.Id }, new { @class = "btn btn-primary" })
                    </p>

                    <table id="table-coupons" class="table table-bordered">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Code</th>
                                <th>Discount</th>
                                <th>Email</th>
                                <th>Expiration</th>
                                <th>Max Quantity</th>
                                <th>Is Active</th>
                                <th>Max Usage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var coupon in Model.Item.Coupons)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("Details", "Coupon", new{ id = coupon.Id })">Details</a>
                                        @if (coupon.IsActive)
                                        {
                                            using (Html.BeginForm<CouponController>(b => b.Deactivate(coupon.Id), FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()
                                                <a href="javascript:;" class="FormSubmit">Deactivate</a>
                                            }
                                        }
                                    </td>
                                    <td>@coupon.Code</td>
                                    <td>@coupon.DiscountAmount.ToString("C")</td>
                                    <td>@coupon.Email</td>
                                    <td data-sort="@(coupon.Expiration?.Ticks)">
                                        @(coupon.Expiration?.ToString("d"))
                                    </td>
                                    <td>@coupon.MaxQuantity</td>
                                    <td>@coupon.IsActive</td>
                                    <td data-sort="@coupon.MaxUsage">
                                        @(coupon.MaxUsage == int.MaxValue ? "Unlimited" : coupon.MaxUsage.ToString())
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </fieldset>
            </div>

        </div>
    </div>

    <div>
        @Html.ActionLink("Back to List", "List", "ItemManagement") |
        @Html.ActionLink("Details", "Details", "ItemManagement", new { id = Model.Item.Id }, null) |
        @Html.ActionLink("Map", "Map", "ItemManagement", new { id = Model.Item.Id }, null)
    </div>
</div>

@section AdditionalStyles
{
    @Styles.Render("~/Content/Chosen")

    @Styles.Render("~/Content/qtipcss")
    <style type="text/css">
        #Confirmation_Word_Bank {
            margin-left: 540px;
            margin-top: 35px;
            background-color: #EFEFEF;
            border: 1px solid #7F7F7F;
            float: right;
            padding: 5px;
            position: absolute;
            width: 130px;
            font-family: Trebuchet MS,Arial,Georgia;
            font-size: 0.8em;
        }

            #Confirmation_Word_Bank a:link {
                color: #0B65C1;
                font-weight: bold;
                text-decoration: none;
            }

            #Confirmation_Word_Bank a:hover {
                color: #A50000
            }

        #Confirmation_Word_Bank_Unpaid {
            margin-left: 540px;
            margin-top: 340px;
            background-color: #EFEFEF;
            border: 1px solid #7F7F7F;
            float: right;
            padding: 5px;
            position: absolute;
            width: 130px;
            font-family: Trebuchet MS,Arial,Georgia;
            font-size: 0.8em;
        }

            #Confirmation_Word_Bank_Unpaid a:link {
                color: #0B65C1;
                font-weight: bold;
                text-decoration: none;
            }

            #Confirmation_Word_Bank_Unpaid a:hover {
                color: #A50000
            }
    </style>
}

@section AdditionalScripts {

    <script type="text/javascript">
        // set values to be consumed in itemEdit.js
        var getExtendedPropertyUrl = '@Url.Action("GetExtendedProperties", "ItemManagement")';
        var saveTemplateUrl = '@Url.Action("SaveTemplate", "ItemManagement")';
        var id = '@Model.Item.Id';
        var scriptUrl = '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")';
    </script>

    @Scripts.Render("~/Scripts/ItemEdit.js")
    @Scripts.Render("~/Scripts/tiny_mce/jquery.tinymce.js")
    @Scripts.Render("~/Scripts/jquery.enableTinyMce.js")
    @Scripts.Render("~/bundles/chosen")
    @Scripts.Render("~/bundles/qtip")

    <script type="text/javascript">
        function SaveTemplateText() {
            var textboxPaid = $("#PaidText");
            var textboxUnpaid = $("#UnpaidText");
            var token = $($("input:hidden[name='__RequestVerificationToken']")[0]).val();

            $.post(saveTemplateUrl, { id: id, textPaid: textboxPaid.val(), textUnpaid: textboxUnpaid.val(), __RequestVerificationToken: token }
                , function (result) {
                    if (result) {
                        alert(result);
                    }
                    else { alert("template was unable to save."); }

                });
        }
    </script>

    <script type="text/javascript">
        $(function () {
            var fragment = window.location.hash;

            switch (fragment) {
            case "#@StaticValues.Tab_Details":
                $("#Tab-@StaticValues.Tab_Details").click();
                $("#Item_FinancialAccountId").chosen();
                break;
            case "#@StaticValues.Tab_Editors":
                $("#Tab-@StaticValues.Tab_Editors").click();
                $("#userId").chosen();
                break;
            case "#@StaticValues.Tab_Questions":
                $("#Tab-@StaticValues.Tab_Questions").click();
                break;
            case "#@StaticValues.Tab_Templates":
                $("#Tab-@StaticValues.Tab_Templates").click();
                break;
            case "#@StaticValues.Tab_Coupons":
                $("#Tab-@StaticValues.Tab_Coupons").click();
                break;
            default:
                $("#Item_FinancialAccountId").chosen();
            }



            //---------------- setup html editors ------------------//
            $("#PaidText").enableTinyMce({
                script_location: scriptUrl,
                overrideWidth: '500',
                overrideHeight: '250',
                overrideShowPreview: 'preview,',
                overridePlugin_preview_pageurl: '@Url.Content("~/Static/Preview.html")',
            });
            $(".add-token").click(function (event) {
                var pasteValue = $(this).attr("name");
                tinyMCE.execInstanceCommand("PaidText", "mceInsertContent", false, pasteValue);
            });

            $("#UnpaidText").enableTinyMce({
                script_location: scriptUrl,
                overrideWidth: '500',
                overrideHeight: '250',
                overrideShowPreview: 'preview,',
                overridePlugin_preview_pageurl: '@Url.Content("~/Static/Preview.html")',
            });
            $(".add-token-unpaid").click(function (event) {
                var pasteValue = $(this).attr("name");
                tinyMCE.execInstanceCommand("UnpaidText", "mceInsertContent", false, pasteValue);
            });

            $("#Item_Description").enableTinyMce({ script_location: scriptUrl });
            $("#Item_CheckPaymentInstructions").enableTinyMce({ script_location: scriptUrl, overrideHeight: '255' });

            //---------------- setup tables ------------------//
            $("#table-editors").DataTable({
                order: [[1, 'asc']],
                columnDefs: [{
                    targets: [0],
                    orderable: false,
                }],
            });

            $("#table-questions-transactions").DataTable({
                columnDefs: [{
                    targets: [0],
                    orderable: false,
                }],
            });

            $("#table-questions-quantity").DataTable({
                columnDefs: [{
                    targets: [0],
                    orderable: false,
                }],
            });

            $("#table-coupons").DataTable({
                columnDefs: [{
                    targets: [0],
                    orderable: false,
                }],
            });



            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                var target = $(e.target).attr("href"); // activated tab
                if (target === "#Editors") {
                    $("#userId").chosen();
                }
                if (target === "#Details") {
                    $("#Item_FinancialAccountId").chosen();
                }
            });
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function() {
            $("#ConfirmationWordBankHelp").attr("title", "");
            $("#ConfirmationWordBankHelpUnpaid").attr("title", "");
            $("#ConfirmationWordBankHelp").qtip({ // Grab some elements to apply the tooltip to
                content: {
                    text: "The following are a list of values that can be clicked on to insert into the text where the cursor is on the Paid Template. The values will be dynamically replaced when used.<br><h3>First Name: </h3>The Contact Information's First Name.<br><h3>Last Name: </h3>The Contact Information's Last Name.<br><h3>Total Paid: </h3>The total amount of accepted payments.<br><h3>Quantity: </h3>The number of items purchased.<br><h3>Quantity Name: </h3>The Name of the items.<br><h3>Transaction Number: </h3>The transaction number. Can be used with the email to lookup the transaction.<br><h3>Payment Method: </h3>'Check' or 'Credit Card' sans quotes.<br><h3>Donation Thanks: </h3>If a donation is detected the text '@String.Format(Html.Encode(ScreenText.STR_DonationText), "xxx")' Sans quotes where xxx is replaced with the amount."
                },
                position: {
                    my: 'top right',
                    at: 'bottom left'
                }
            });
            $("#ConfirmationWordBankHelpUnpaid").qtip({ // Grab some elements to apply the tooltip to
                content: {
                    text: "The following are a list of values that can be clicked on to insert into the text where the cursor is on the Unpaid Template. The values will be dynamically replaced when used.<br><h3>First Name: </h3>The Contact Information's First Name.<br><h3>Last Name: </h3>The Contact Information's Last Name.<br><h3>Total Paid: </h3>The total amount of accepted payments.<br><h3>Quantity: </h3>The number of items purchased.<br><h3>Quantity Name: </h3>The Name of the items.<br><h3>Transaction Number: </h3>The transaction number. Can be used with the email to lookup the transaction.<br><h3>Payment Method: </h3>'Check' or 'Credit Card' sans quotes.<br><h3>Donation Thanks: </h3>If a donation is detected the text '@String.Format(Html.Encode(ScreenText.STR_DonationText), "xxx")' Sans quotes where xxx is replaced with the amount."
                },
                position: {
                    my: 'top right',
                    at: 'bottom left'
                }
            });
        });
    </script>

    <script src="https://finjector.ucdavis.edu/finjector.js?v=3" type="text/javascript"></script>

    <script type="text/javascript">

        $("#ccoa-picker").on("click",

            async function () {
                const chart = await window.Finjector.findChartSegmentString();
                if (chart && chart.status === "success") {
                    $("#Item_UserAddedFinancialAccount").val(chart.data);
                }
                else {
                    alert("Something went wrong with the CCOA picker")
                }
                return false;
            });

    </script>

}