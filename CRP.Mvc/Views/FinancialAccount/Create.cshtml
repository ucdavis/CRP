@model CRP.Core.Domain.FinancialAccount

@{
    ViewBag.Title = "Create";
}
@section NavButtons
{
    <div class="pull-right">
        @Html.Partial("_LogonPartial")
    </div>
}

<div class="boundary">
    <h2>Create</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Financial Account</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Chart, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Chart, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Chart, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Account, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Account, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Account, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SubAccount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SubAccount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SubAccount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FinancialSegmentString, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="input-group">
                        @Html.EditorFor(model => model.FinancialSegmentString, new { htmlAttributes = new { @class = "form-control" } })
                        <span class="input-group-btn">
                            <button id="popup" class="btn" type="button">CCOA Picker</button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.FinancialSegmentString, "", new { @class = "text-danger" })
                </div>
            </div>
            

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" /> |
                    @Html.ActionLink("Cancel", "Index", "FinancialAccount", null, new { @class = "btn" })
                </div>
            </div>
        </div>
    }
</div>

@section AdditionalScripts
{

    <script type="text/javascript">

        $("#popup").on("click",
            
            async function () {               
                const chart = await window.Finjector.findChartSegmentString("https://localhost:3000/landing");
                if (chart && chart.status === "success") {
                    alert(chart.data);
                    $("#FinancialSegmentString").val(chart.data);
                }
                return false;
            });

        

        /* Inject as script tag in html to gain access to Finjector window object */
        window.Finjector = {};

        // call this function to open popup and get chart data
        window.Finjector.findChartSegmentString = (url) => {
            return new Promise((resolve, reject) => {
                const uri = url || "/landing"; // TODO: make this configurable & full URL goes here

                const newWindow = popupCenter(uri, "popup", 600, 600);

                const messageHandler = (event) => {
                    if (event.origin !== newWindow.origin) {
                        return;
                    }

                    if (event.data.source === "finjector") {
                        // go the data we want, so remove the listener, close the window, and return the promise result
                        newWindow.close();
                        window.removeEventListener("message", messageHandler);

                        if (event.data.status === "success") {
                            resolve(event.data);
                        } else {
                            reject(event.data);
                        }
                    }
                };

                if (newWindow) {
                    window.addEventListener("message", messageHandler, false);
                }
            });
        };

        // TODO: make helper so HTML clients can pass element ID and we'll auto attach a click handler to it

        // https://stackoverflow.com/a/16861050
        const popupCenter = (url, title, w, h) => {
            // Fixes dual-screen position
            const dualScreenLeft =
                window.screenLeft !== undefined ? window.screenLeft : window.screenX;
            const dualScreenTop =
                window.screenTop !== undefined ? window.screenTop : window.screenY;

            const width = window.innerWidth
                ? window.innerWidth
                : document.documentElement.clientWidth
                    ? document.documentElement.clientWidth
                    : window.screen.width;
            const height = window.innerHeight
                ? window.innerHeight
                : document.documentElement.clientHeight
                    ? document.documentElement.clientHeight
                    : window.screen.height;

            const systemZoom = width / window.screen.availWidth;
            const left = (width - w) / 2 / systemZoom + dualScreenLeft;
            const top = (height - h) / 2 / systemZoom + dualScreenTop;
            const newWindow = window.open(
                url,
                title,
                `
        scrollbars=yes,
        width=${w / systemZoom}, 
        height=${h / systemZoom}, 
        top=${top}, 
        left=${left}
        `
            );

            newWindow?.focus();

            return newWindow;
        };
    </script>
}