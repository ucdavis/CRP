@using System.Web.UI.WebControls
@using CRP.Core.Resources
@using MvcContrib.FluentHtml
@model CRP.Controllers.ViewModels.ItemQuestionViewModel
    
<div class="form-group">

    @Html.Hidden(".QuestionId", Model.Question.Id, new { @class = StaticValues.Class_indexedControl })
    @Html.Hidden(".QuestionSetId", Model.Question.QuestionSet.Id, new { @class = StaticValues.Class_indexedControl })
    @Html.Hidden(".QuantityIndex", 0, new { @class = StaticValues.Class_indexedControl })


    <!-- Render the controls now -->
    @switch (Model.Question.QuestionType.Name)
    {
        case "Text Box":
            <label id="_Answer" class="indexedControl">@Model.Question.Name</label>
            <input name=".Answer" id="_Answer" class="form-control indexedControl @Model.Question.ValidationClasses" type="text" @(Model.Disable ? "disabled='true'" : null) value="@Model.Answer" placeholder="@Model.Question.Name"/>
            break;
        case "Text Area":
            <label id="_Answer" class="indexedControl">@Model.Question.Name</label>
            @Html.TextArea(".Answer", Model.Answer, new {@class = "form-control " + StaticValues.Class_indexedControl, rows = "3"})
            break;
        case "Date":
            <label id="_Answer" class="indexedControl">@Model.Question.Name</label>
            @Html.TextBox(".Answer", Model.Answer, new {@class = "form-control dateForm indexedControl " + Model.Question.ValidationClasses, placeholder = "mm/dd/yyyy"})
            break;
        case "Boolean":
            var ans = false;
            if (!Boolean.TryParse(Model.Answer, out ans))
            {
                ans = false;
            }
            @Html.CheckBox(".Answer", ans, new {@class = "indexedControl"})
            <label id="_Answer" class="indexedControl">@Model.Question.Name</label>
            break;
        case "Radio Buttons":
            <label>@Model.Question.Name</label>

            var option = !string.IsNullOrEmpty(Model.Answer) ? Model.Answer.Trim().ToLower() : string.Empty;
            foreach (var o in Model.Question.Options)
            {
                var isChecked = option == o.Name.Trim().ToLower();
                <br/>
                <span class="form-check">
                    <label class="form-check-label">
                        @Html.RadioButton(".Answer", o.Name, isChecked, new {@class = "form-check-input " + StaticValues.Class_indexedControl + " " + Model.Question.ValidationClasses})
                        @Html.Encode(o.Name)
                    </label>
                </span>
            }
            break;
        case "Checkbox List":
            <label class="qtip-checklist">@Model.Question.Name</label>
            var options = !string.IsNullOrEmpty(Model.Answer) ? Model.Answer.Split(',') : new string[1];

            foreach (var o in Model.Question.Options)
            {
                var cblAns = options.Contains(o.Name);
                <br/>
                <span class="form-check">
                    <label class="form-check-label">
                        @Html.CheckBox(".CblAnswer", cblAns, new {@class = "form-check-input " + StaticValues.Class_indexedControl + " " + Model.Question.ValidationClasses, @value = o.Name})
                        @Html.Encode(o.Name)
                    </label>
                </span>
            }

            break;
        case "No Answer":
            <div>@Model.Question.Name</div>
            break;
        case "Drop Down":
            @*@this.Select(".Answer").Options(Model.Question.Options.OrderBy(a => a.Name), x => x.Name, x => x.Name).Class("indexedControl " + Model.Question.ValidationClasses).Selected(Model.Answer ?? string.Empty).FirstOption("--Select--")*@
            <label id="_Answer" class="indexedControl">@Model.Question.Name</label>
            <select class="form-control indexedControl @Model.Question.ValidationClasses"  id=".Answer">
                <option>--Select--</option>
                @foreach (var o in Model.Question.Options.OrderBy(a => a.Name))
                {
                    if (Model.Answer != null && Model.Answer == o.Name)
                    {
                        <option value="@o.Name" selected>@o.Name</option>
                    }
                    else
                    {
                        <option value="@o.Name">@o.Name</option>
                    }

                }
            </select>
            break;
    }
    <span class="val_img">&nbsp</span> 
</div>



