@model CRP.Controllers.ViewModels.QuestionViewModel

@using System.Net.Http
@using CRP.Core.Domain
@using Newtonsoft.Json
@using Validator = CRP.Core.Domain.Validator

@{
    ViewBag.Title = "Create Question for Set";
    var query = Request.Url.ParseQueryString();
    var questionSetId = query["questionSetId"];

    var questionTypes = (IReadOnlyList<QuestionType>) ViewBag.QuestionTypes;
    var validators = (IReadOnlyList<Validator>) ViewBag.Validators;
}
    <div class="boundary">
        <h2>@ViewBag.Title</h2>

        @Html.ValidationSummary("Create was unsuccessful. Please correct the errors and try again.")

        <div class="row">
            <div class="col-lg-6">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        <label for="Name">Name</label>
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Name)
                    </div>

                    <div class="form-group">
                        @{
                            var questionTypesOptions = questionTypes.Select(t => new SelectListItem() { Text = t.Name, Value = t.Id.ToString() });
                        }

                        <label>Question Type</label>
                        @Html.DropDownListFor(x => x.QuestionTypeId, questionTypesOptions, "-- Select --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.QuestionTypeId)
                    </div>

                    <div id="Option" class="form-group" style="display: none;">
                        <label>Options:</label>
                        <div id="OptionsContainer">
                            @for (var i = 0; i < Model.Options.Count; i++)
                            {
                                var option = Model.Options[i];

                                <div class='input-group'>
                                    <span class='input-group-addon'>@(i + 1)</span>
                                    <input id="Options[@i]" name="Options[@i]" class='form-control' value="@option" required>
                                </div>
                            }
                        </div>

                        <img id="AddOptions" src="@Url.Content("~/Images/plus.png")" style="width: 24px; height: 24px;"/>
                    </div>

                    <fieldset>
                        <legend for="Validators">Validators:</legend>
                        
                        @for (var i = 0; i < validators.Count; i++)
                        {
                            var id = "Validators[" + i + "]";
                            var name = "Validators[" + i + "]";
                            var validator = validators[i];
                            var match = Model.Validators.Contains(validator.Id);

                            <div class="checkbox">
                                <label>
                                    @Html.CheckBox(name, match, new {id, value = validator.Id})
                                    @validator.Name
                                </label>
                            </div>
                        }

                        @Html.ValidationMessageFor(x => x.Validators)
                    </fieldset>

                    <input type="submit" value="Create" class="btn btn-primary pull-right" />
                }
            </div>
            <div class="col-lg-6">
                <div class="panel panel-default">
                    <div class="panel-heading">Sample</div>
                    <div class="panel-body">

                        <div class="form-group hideAndShow" id="SampleTextBox" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a TextBox Question?")
                            </label>
                            <input type="text" class="form-control" />
                        </div>

                        <div class="form-group hideAndShow" id="SampleTextArea" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a TextArea Question?")
                            </label>
                            <textarea class="form-control"></textarea>
                        </div>

                        <div class="checkbox hideAndShow" id="SampleBoolean" style="display: none;">
                            <label>
                                <input type="checkbox" />
                                Sample of a Boolean Question?
                            </label>
                        </div>

                        <div class="hideAndShow" id="SampleRadioButtons" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a Radio Button Question?")
                            </label>

                            <div class="radio">
                                <label>
                                    <input type="radio" name="radioExample" />
                                    "Red"
                                </label>
                            </div>

                            <div class="radio">
                                <label>
                                    <input type="radio" name="radioExample" />
                                    "Blue"
                                </label>
                            </div>

                            <div class="radio">
                                <label>
                                    <input type="radio" name="radioExample" />
                                    "Green"
                                </label>
                            </div>

                            <div class="radio">
                                <label>
                                    <input type="radio" name="radioExample" />
                                    "Not any color above but one that cause this to wrap on next line"
                                </label>
                            </div>
                        </div>

                        <div class="hideAndShow" id="SampleCheckboxList" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a Checkbox List Question?")
                            </label>

                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" />
                                    "Checkbox List 1"
                                </label>
                            </div>

                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" />
                                    "Checkbox List 2"
                                </label>
                            </div>

                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" />
                                    "Checkbox List 3"
                                </label>
                            </div>

                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" />
                                    "Checkbox List 4"
                                </label>
                            </div>

                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" />
                                    "Checkbox List 5"
                                </label>
                            </div>
                        </div>

                        <div class="form-group hideAndShow" id="SampleDropDown" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a Dropdown List Question?")
                            </label>

                            <select class="form-control">
                                <option>-- Select a Option --</option>
                                <option value="1">DropDown 1</option>
                                <option value="2">DropDown 2</option>
                                <option value="3">DropDown 3</option>
                            </select>
                        </div>

                        <div class="form-group hideAndShow" id="SampleDate" style="display: none;">
                            <label>
                                @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a Date Question?")
                            </label>
                            <input type="text" class="form-control" data-provide="datepicker" placeholder="MM/DD/YYYY" />
                        </div>

                        <div class="form-group hideAndShow" id="SampleNoAnswer" style="display: none;">
                            @(!string.IsNullOrEmpty(Model.Name) ? Model.Name : "Sample of a No Answer Question? This can cover several lines up to a maximum of about 200 characters.")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div>
            @Html.ActionLink("Back to Question Set", "Edit", "QuestionSet", new { id = questionSetId }, null)
        </div>
    </div>

@section AdditionalScripts {
    <script type="text/javascript">
        $(document).ready(function () {
            // attach event handlers
            $("#QuestionTypeId").change(QuestionTypeChange);
            $("#AddOptions").click(AddOptionInput);

            // setup page on first load
            QuestionTypeChange();
        });

        var typesWithOptions = @Html.Raw(JsonConvert.SerializeObject(questionTypes.Where(a => a.HasOptions).Select(a => a.Id.ToString())));

        function QuestionTypeChange() {
            var input = $("#QuestionTypeId");
            var selectedId = input.find("option:selected").val();

            // should we show/hide options list?
            if ($.inArray(selectedId, typesWithOptions) >= 0) {
                // it's in the array, it requires options, show and add one if necessary
                $("#Option").show();

                var options = $("#OptionsContainer").children().length;
                if (options < 1) {
                    AddOptionInput();
                }
            }
            else {
                // always reset the list
                $("#Option").hide();
                $("#OptionsContainer").empty();
            }

            // hide all samples, then show just one
            $(".hideAndShow").hide();
            var myText = input.find("option:selected").text().replace(" ", "");
            $("#Sample" + myText).show();
        }

        function AddOptionInput() {
            var index = $("#OptionsContainer").children().length;

            // create input for entry
            var container = $("<div class='input-group'><span class='input-group-addon'>" + (index + 1) + "</span></div>");

            var input = $("<input class='form-control' required>");
            var name = "Options[" + index + "]";
            input.attr("id", name);
            input.attr("name", name);
            container.append(input);

            $("#OptionsContainer").append(container);
            input.focus();
        }
    </script>
}
